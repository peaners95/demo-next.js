name: Build Next.js web app

on: 
  push

jobs:
  build-project:
    name: Build project
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Install NPM dependencies
      run: npm install
    - name: Build assets
      run: npm run build
    - name: Upload static site content
      uses: actions/upload-artifact@v3
      with:
        name: static-site
        path: .next/
  build-container:
    name: Build container
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Build and push to Docker GitHub
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: peaners95/demo-next.js:latest, peaners95/demo-next.js:${{ github.run_number }}
    - name: Push to Github Packages
      uses: docker/build-push-action@v1
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: docker.pkg.github.com
        repository: ${{ github.repository }}/next
        tags: latest, ${{ github.run_number }} 
  release-project:
    name: Release project
    runs-on: ubuntu-latest
    needs: build-project
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: static-site
    - name: Test download
      run: ls -R
    - name: Archive content
      uses: thedoctor0/zip-release@master
      with:
        filename: site.zip
    - name: Create GitHub release
      id: create-new-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }} 
        asset_path: ./site.zip
        asset_name: site-v${{ github.run_number }}.zip
        asset_content_type: application/zip
    - name: Try the cluster !
      run: kubectl get pods -A
    - name: Build image
      run: |
        export SHELL=/bin/bash
        eval $(minikube -p minikube docker-env)
        docker build -f ./Dockerfile -t local/example .
        echo -n "verifying images:"
        docker images        
    - name: Deploy to minikube
      run:
        kubectl apply -f deploy-to-minikube.yaml
    - name: Test service URLs
      run: |
        minikube service list
        minikube service example --url
        echo "------------------opening the service------------------"
        curl $(minikube service example --url)
